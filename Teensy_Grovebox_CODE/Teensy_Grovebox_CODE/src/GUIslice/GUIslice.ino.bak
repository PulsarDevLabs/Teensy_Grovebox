//<App !Start!>
// FILE: [GUIslice.ino]
// Created by GUIslice Builder version: [0.17.b11]
//
// GUIslice Builder Generated File
//
// For the latest guides, updates and support view:
// https://github.com/ImpulseAdventure/GUIslice
//
//<App !End!>

// ------------------------------------------------
// Headers to include
// ------------------------------------------------
#include "GUIslice_GSLC.h"


// ------------------------------------------------
// Program Globals
// ------------------------------------------------

// Save some element references for direct access
//<Save_References !Start!>
gslc_tsElemRef* m_pElemAudioinGainRing= NULL;
gslc_tsElemRef* m_pElemAudioinLineInBtn= NULL;
gslc_tsElemRef* m_pElemAudioinLmLBar= NULL;
gslc_tsElemRef* m_pElemAudioinLmRBar= NULL;
gslc_tsElemRef* m_pElemAudioinLmVol= NULL;
gslc_tsElemRef* m_pElemAudioinLmVolTxt= NULL;
gslc_tsElemRef* m_pElemAudioinMicBtn= NULL;
gslc_tsElemRef* m_pElemAudioinPflBtn= NULL;
gslc_tsElemRef* m_pElemAudioinUsbLBar= NULL;
gslc_tsElemRef* m_pElemAudioinUsbRBar= NULL;
gslc_tsElemRef* m_pElemAudioinUsbVol= NULL;
gslc_tsElemRef* m_pElemAudioinUsbVolTxt= NULL;
gslc_tsElemRef* m_pElemAudiooutHpVolRing= NULL;
gslc_tsElemRef* m_pElemAudiooutLineLBar= NULL;
gslc_tsElemRef* m_pElemAudiooutLinePeakBar= NULL;
gslc_tsElemRef* m_pElemAudiooutLineRBar= NULL;
gslc_tsElemRef* m_pElemAudiooutLineVol= NULL;
gslc_tsElemRef* m_pElemAudiooutLineVolTxt= NULL;
gslc_tsElemRef* m_pElemAudiooutPrefaderBtn= NULL;
gslc_tsElemRef* m_pElemAudiooutUsbLBar= NULL;
gslc_tsElemRef* m_pElemAudiooutUsbPeakBar= NULL;
gslc_tsElemRef* m_pElemAudiooutUsbRBar= NULL;
gslc_tsElemRef* m_pElemAudiooutUsbVol= NULL;
gslc_tsElemRef* m_pElemAudiooutUsbVolTxt= NULL;
gslc_tsElemRef* m_pElemListbox1   = NULL;
gslc_tsElemRef* m_pElemMidiModBtn = NULL;
gslc_tsElemRef* m_pElemMidiPitchbendBtn= NULL;
gslc_tsElemRef* m_pElemMidiRingBlue= NULL;
gslc_tsElemRef* m_pElemMidiRingGreen= NULL;
gslc_tsElemRef* m_pElemMidiRingRed= NULL;
gslc_tsElemRef* m_pElemMidiRingYellow= NULL;
gslc_tsElemRef* m_pElemMidiTxtChannel= NULL;
gslc_tsElemRef* m_pElemMidiTxtOctave= NULL;
gslc_tsElemRef* m_pElemOutMixerInsLBar= NULL;
gslc_tsElemRef* m_pElemOutMixerInsPan= NULL;
gslc_tsElemRef* m_pElemOutMixerInsRBar= NULL;
gslc_tsElemRef* m_pElemOutMixerInsVol= NULL;
gslc_tsElemRef* m_pElemOutMixerInsVolTxt= NULL;
gslc_tsElemRef* m_pElemOutMixerLmLBar= NULL;
gslc_tsElemRef* m_pElemOutMixerLmPan= NULL;
gslc_tsElemRef* m_pElemOutMixerLmRBar= NULL;
gslc_tsElemRef* m_pElemOutMixerLmVol= NULL;
gslc_tsElemRef* m_pElemOutMixerLmVolTxt= NULL;
gslc_tsElemRef* m_pElemOutMixerPanBtn= NULL;
gslc_tsElemRef* m_pElemOutMixerPflBtn= NULL;
gslc_tsElemRef* m_pElemOutMixerRecPan= NULL;
gslc_tsElemRef* m_pElemOutMixerTitleTxt= NULL;
gslc_tsElemRef* m_pElemOutMixerTitleTxt139= NULL;
gslc_tsElemRef* m_pElemOutMixerTitleTxt139_148= NULL;
gslc_tsElemRef* m_pElemOutMixerUsbLBar= NULL;
gslc_tsElemRef* m_pElemOutMixerUsbPan= NULL;
gslc_tsElemRef* m_pElemOutMixerUsbRBar= NULL;
gslc_tsElemRef* m_pElemOutMixerUsbVol= NULL;
gslc_tsElemRef* m_pElemOutMixerUsbVolTxt= NULL;
gslc_tsElemRef* m_pElemReverbDampingRing= NULL;
gslc_tsElemRef* m_pElemReverbFilterRing= NULL;
gslc_tsElemRef* m_pElemReverbMixRing= NULL;
gslc_tsElemRef* m_pElemReverbRSRing= NULL;
gslc_tsElemRef* m_pElemTxtBatt    = NULL;
gslc_tsElemRef* m_pElemTxtTitle   = NULL;
gslc_tsElemRef* m_pElemWaveCompressorBtn= NULL;
gslc_tsElemRef* m_pElemWaveDelayBtn= NULL;
gslc_tsElemRef* m_pElemWaveModBtn = NULL;
gslc_tsElemRef* m_pElemWaveOctaveDecBtn= NULL;
gslc_tsElemRef* m_pElemWaveOctaveIncBtn= NULL;
gslc_tsElemRef* m_pElemWaveOctaveTxt= NULL;
gslc_tsElemRef* m_pElemWaveReverbBtn= NULL;
gslc_tsElemRef* m_pElemWaveSoundBtn= NULL;
gslc_tsElemRef* m_pElemWaveVelocityBtn= NULL;
gslc_tsElemRef* m_pElemWaveVolBar = NULL;
gslc_tsElemRef* m_pElemWaveVolRing= NULL;
gslc_tsElemRef* m_pListSlider1    = NULL;
//<Save_References !End!>

// Define debug message function
static int16_t DebugOut(char ch) { if (ch == (char)'\n') Serial.println(""); else Serial.write(ch); return 0; }

// ------------------------------------------------
// Callback Methods
// ------------------------------------------------
// Common Button callback
bool CbBtnCommon(void* pvGui,void *pvElemRef,gslc_teTouch eTouch,int16_t nX,int16_t nY)
{
  // Typecast the parameters to match the GUI and element types
  gslc_tsGui*     pGui     = (gslc_tsGui*)(pvGui);
  gslc_tsElemRef* pElemRef = (gslc_tsElemRef*)(pvElemRef);
  gslc_tsElem*    pElem    = gslc_GetElemFromRef(pGui,pElemRef);

  if ( eTouch == GSLC_TOUCH_UP_IN ) {
    // From the element's ID we can determine which button was pressed.
    switch (pElem->nId) {
//<Button Enums !Start!>
      case E_ELEM_BASE_BACK_BTN:
        break;
      case E_ELEM_MIDI_OCTAVE_INC:
        break;
      case E_ELEM_MIDI_OCTAVE_DEC:
        break;
      case E_ELEM_MIDI_CHANNEL_INC:
        break;
      case E_ELEM_MIDI_CHANNEL_DEC:
        break;
      case E_ELEM_MIDI_PITCHBEND_BTN:
        break;
      case E_ELEM_MIDI_MOD_BTN:
        break;
      case E_ELEM_POWER_BTN_YES:
        break;
      case E_ELEM_POWER_BTN_CALCEL:
        break;
      case E_ELEM_AUDIOOUT_ANALOG_BTN:
        break;
      case E_ELEM_AUDIOOUT_USB_BTN:
        break;
      case E_ELEM_AUDIOOUT_PREFADER_BTN:
        break;
      case E_ELEM_AUDIOOUT_PP_BTN:
        break;
      case E_ELEM_OUT_MIXER_BACK_BTN:
        break;
      case E_ELEM_OUT_MIXER_PFL_BTN:
        break;
      case E_ELEM_OUT_MIXER_PAN_BTN:
        break;
      case E_ELEM_AUDIOIN_LINE_IN_BTN:
        break;
      case E_ELEM_AUDIOIN_MIC_BTN:
        break;
      case E_ELEM_AUDIOIN_PFL_BTN:
        break;
      case E_ELEM_HOME_SYNTH_BTN:
        break;
      case E_ELEM_HOME_MIDI_BTN:
        break;
      case E_ELEM_HOME_RECODER_BTN:
        break;
      case E_ELEM_HOME_FX_BTN:
        break;
      case E_ELEM_HOME_WAVE_BTN:
        break;
      case E_ELEM_HOME_DRUM_BTN:
        break;
      case E_ELEM_HOME_KEYBOARD_BTN:
        break;
      case E_ELEM_HOME_SETTINGS_BTN:
        break;
      case E_ELEM_WAVE_VELOCTIY_BTN:
        break;
      case E_ELEM_WAVE_OCTAVE_INC_BTN:
        break;
      case E_ELEM_WAVE_OCTAVE_DEC_BTN:
        break;
      case E_ELEM_WAVE_SOUND_BTN:
        break;
      case E_ELEM_WAVE_COMPRESSOR_BTN:
        break;
      case E_ELEM_WAVE_MOD_BTN:
        break;
      case E_ELEM_WAVE_REVERB_BTN:
        break;
      case E_ELEM_WAVE_DELAY_BTN:
        break;
      case E_ELEM_REVERB_BACK_BTN:
        break;
      case E_ELEM_BTN45:
        break;
//<Button Enums !End!>
      default:
        break;
    }
  }
  return true;
}
//<Checkbox Callback !Start!>
//<Checkbox Callback !End!>
//<Keypad Callback !Start!>
//<Keypad Callback !End!>
//<Spinner Callback !Start!>
//<Spinner Callback !End!>
bool CbListbox(void* pvGui, void* pvElemRef, int16_t nSelId)
{
  gslc_tsGui*     pGui     = (gslc_tsGui*)(pvGui);
  gslc_tsElemRef* pElemRef = (gslc_tsElemRef*)(pvElemRef);
  gslc_tsElem*    pElem    = gslc_GetElemFromRef(pGui, pElemRef);
  char            acTxt[MAX_STR + 1];
  
  if (pElemRef == NULL) {
    return false;
  }

  // From the element's ID we can determine which listbox was active.
  switch (pElem->nId) {
//<Listbox Enums !Start!>
    case E_ELEM_LISTBOX1:
      if (nSelId != XLISTBOX_SEL_NONE) {
        gslc_ElemXListboxGetItem(&m_gui, pElemRef, nSelId, acTxt, MAX_STR);
      }
      break;

//<Listbox Enums !End!>
    default:
      break;
  }
  return true;
}
//<Draw Callback !Start!>
//<Draw Callback !End!>

// Callback function for when a slider's position has been updated
bool CbSlidePos(void* pvGui,void* pvElemRef,int16_t nPos)
{
  gslc_tsGui*     pGui     = (gslc_tsGui*)(pvGui);
  gslc_tsElemRef* pElemRef = (gslc_tsElemRef*)(pvElemRef);
  gslc_tsElem*    pElem    = gslc_GetElemFromRef(pGui,pElemRef);
  int16_t         nVal;

  // From the element's ID we can determine which slider was updated.
  switch (pElem->nId) {
//<Slider Enums !Start!>
    case E_ELEM_AUDIOOUT_USB_VOL:
      // Fetch the slider position
      nVal = gslc_ElemXSeekbarGetPos(pGui,m_pElemAudiooutUsbVol);
      break;
    case E_ELEM_AUDIOOUT_LINE_VOL:
      // Fetch the slider position
      nVal = gslc_ElemXSeekbarGetPos(pGui,m_pElemAudiooutLineVol);
      break;
    case E_ELEM_OUT_MIXER_LM_VOL:
      // Fetch the slider position
      nVal = gslc_ElemXSeekbarGetPos(pGui,m_pElemOutMixerLmVol);
      break;
    case E_ELEM_OUT_MIXER_LM_PAN:
      // Fetch the slider position
      nVal = gslc_ElemXSeekbarGetPos(pGui,m_pElemOutMixerLmPan);
      break;
    case E_ELEM_OUT_MIXER_USB_VOL:
      // Fetch the slider position
      nVal = gslc_ElemXSeekbarGetPos(pGui,m_pElemOutMixerUsbVol);
      break;
    case E_ELEM_OUT_MIXER_USB_PAN:
      // Fetch the slider position
      nVal = gslc_ElemXSeekbarGetPos(pGui,m_pElemOutMixerUsbPan);
      break;
    case E_ELEM_OUT_MIXER_INS_VOL:
      // Fetch the slider position
      nVal = gslc_ElemXSeekbarGetPos(pGui,m_pElemOutMixerInsVol);
      break;
    case E_ELEM_OUT_MIXER_INS_PAN:
      // Fetch the slider position
      nVal = gslc_ElemXSeekbarGetPos(pGui,m_pElemOutMixerInsPan);
      break;
    case E_ELEM_OUT_MIXER_REC_PAN:
      // Fetch the slider position
      nVal = gslc_ElemXSeekbarGetPos(pGui,m_pElemOutMixerRecPan);
      break;
    case E_ELEM_AUDIOIN_LM_VOL:
      // Fetch the slider position
      nVal = gslc_ElemXSeekbarGetPos(pGui,m_pElemAudioinLmVol);
      break;
    case E_ELEM_AUDIOIN_USB_VOL:
      // Fetch the slider position
      nVal = gslc_ElemXSeekbarGetPos(pGui,m_pElemAudioinUsbVol);
      break;
    case E_LISTSCROLL1:
      // Fetch the slider position
      nVal = gslc_ElemXSliderGetPos(pGui,m_pListSlider1);
      break;

//<Slider Enums !End!>
    default:
      break;
  }

  return true;
}
//<Tick Callback !Start!>
//<Tick Callback !End!>

void setup()
{
  // ------------------------------------------------
  // Initialize
  // ------------------------------------------------
  Serial.begin(9600);
  // Wait for USB Serial 
  //delay(1000);  // NOTE: Some devices require a delay after Serial.begin() before serial port can be used

  gslc_InitDebug(&DebugOut);

  // ------------------------------------------------
  // Create graphic elements
  // ------------------------------------------------
  InitGUIslice_gen();

}

// -----------------------------------
// Main event loop
// -----------------------------------
void loop()
{

  // ------------------------------------------------
  // Update GUI Elements
  // ------------------------------------------------
  
  //TODO - Add update code for any text, gauges, or sliders
  
  // ------------------------------------------------
  // Periodically call GUIslice update function
  // ------------------------------------------------
  gslc_Update(&m_gui);
    
}

